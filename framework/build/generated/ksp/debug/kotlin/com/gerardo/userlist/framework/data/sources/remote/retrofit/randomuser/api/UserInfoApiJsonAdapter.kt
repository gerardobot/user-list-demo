// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.gerardo.userlist.framework.`data`.sources.remote.retrofit.randomuser.api

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class UserInfoApiJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<UserInfoApi>() {
  private val options: JsonReader.Options = JsonReader.Options.of("gender", "name", "email",
      "registered", "phone", "cell", "picture")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "gender")

  private val nameApiAdapter: JsonAdapter<NameApi> = moshi.adapter(NameApi::class.java, emptySet(),
      "name")

  private val registrationApiAdapter: JsonAdapter<RegistrationApi> =
      moshi.adapter(RegistrationApi::class.java, emptySet(), "registration")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "phone")

  private val pictureApiAdapter: JsonAdapter<PictureApi> = moshi.adapter(PictureApi::class.java,
      emptySet(), "picture")

  public override fun toString(): String = buildString(33) {
      append("GeneratedJsonAdapter(").append("UserInfoApi").append(')') }

  public override fun fromJson(reader: JsonReader): UserInfoApi {
    var gender: String? = null
    var name: NameApi? = null
    var email: String? = null
    var registration: RegistrationApi? = null
    var phone: String? = null
    var cell: String? = null
    var picture: PictureApi? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> gender = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("gender",
            "gender", reader)
        1 -> name = nameApiAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        2 -> email = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("email", "email",
            reader)
        3 -> registration = registrationApiAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("registration", "registered", reader)
        4 -> phone = nullableStringAdapter.fromJson(reader)
        5 -> cell = nullableStringAdapter.fromJson(reader)
        6 -> picture = pictureApiAdapter.fromJson(reader) ?: throw Util.unexpectedNull("picture",
            "picture", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return UserInfoApi(
        gender = gender ?: throw Util.missingProperty("gender", "gender", reader),
        name = name ?: throw Util.missingProperty("name", "name", reader),
        email = email ?: throw Util.missingProperty("email", "email", reader),
        registration = registration ?: throw Util.missingProperty("registration", "registered",
            reader),
        phone = phone,
        cell = cell,
        picture = picture ?: throw Util.missingProperty("picture", "picture", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: UserInfoApi?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("gender")
    stringAdapter.toJson(writer, value_.gender)
    writer.name("name")
    nameApiAdapter.toJson(writer, value_.name)
    writer.name("email")
    stringAdapter.toJson(writer, value_.email)
    writer.name("registered")
    registrationApiAdapter.toJson(writer, value_.registration)
    writer.name("phone")
    nullableStringAdapter.toJson(writer, value_.phone)
    writer.name("cell")
    nullableStringAdapter.toJson(writer, value_.cell)
    writer.name("picture")
    pictureApiAdapter.toJson(writer, value_.picture)
    writer.endObject()
  }
}
