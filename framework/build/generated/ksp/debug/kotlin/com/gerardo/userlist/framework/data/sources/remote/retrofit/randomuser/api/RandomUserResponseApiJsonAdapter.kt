// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.gerardo.userlist.framework.`data`.sources.remote.retrofit.randomuser.api

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class RandomUserResponseApiJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<RandomUserResponseApi>() {
  private val options: JsonReader.Options = JsonReader.Options.of("info", "results")

  private val infoApiAdapter: JsonAdapter<InfoApi> = moshi.adapter(InfoApi::class.java, emptySet(),
      "paginationInfo")

  private val listOfUserInfoApiAdapter: JsonAdapter<List<UserInfoApi>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, UserInfoApi::class.java),
      emptySet(), "users")

  public override fun toString(): String = buildString(43) {
      append("GeneratedJsonAdapter(").append("RandomUserResponseApi").append(')') }

  public override fun fromJson(reader: JsonReader): RandomUserResponseApi {
    var paginationInfo: InfoApi? = null
    var users: List<UserInfoApi>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> paginationInfo = infoApiAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("paginationInfo", "info", reader)
        1 -> users = listOfUserInfoApiAdapter.fromJson(reader) ?: throw Util.unexpectedNull("users",
            "results", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return RandomUserResponseApi(
        paginationInfo = paginationInfo ?: throw Util.missingProperty("paginationInfo", "info",
            reader),
        users = users ?: throw Util.missingProperty("users", "results", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: RandomUserResponseApi?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("info")
    infoApiAdapter.toJson(writer, value_.paginationInfo)
    writer.name("results")
    listOfUserInfoApiAdapter.toJson(writer, value_.users)
    writer.endObject()
  }
}
